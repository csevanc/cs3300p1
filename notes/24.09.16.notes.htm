<html>
<head>
<title>INFO 3300 - September 16</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">
  
  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/styles/default.min.css">
  <link rel="stylesheet" href="../css/hljs-base16.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/highlight.min.js"></script>
  
  <script src="https://d3js.org/d3.v7.min.js"></script>
  
  <style>
  
  .gridlines line {
    stroke: #bbb;
  }
  
  .gridlines .domain {
    stroke: none;
  }

  </style>

</head>
<body>
  <div class="container larger">
  <h3>Notes for September 16</h3>
  <p>
    Our dataset is sourced from Gapminder. We'll do a spinoff on one of <a href="https://youtu.be/jbkSRLYSojo">Hans Rosling's famous data presentations</a>.
  </p>
  <p>
    The <a href="https://github.com/d3/d3-fetch/tree/v2.0.0">d3.csv command</a> makes use of the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch API</a>. To learn more about why we use ".then", check out the documentation on <a href="https://developers.google.com/web/fundamentals/primers/promises">JS Promises</a>.
  </p>

  <h5>HTML for today:</h5>



  <svg id="scatterplot" height="400" width="400" style="margin-top:50px" >

  </svg>



  <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
  <h5>Code for today:</h5>
  <pre>
    <code id="display" class="hljs javascript">
    </code>
  </pre>

  <!--- Code for today's class --->
  <script id="notes">
  // --- 1
    //  '../datasets/titanic.json' ---> "go up a directory (because we are in /notes/), then go to datasets,
    //                                     then look for titanic.json in that directory
    // console.log( '---Top of file---' );
    
    // So how do we work with the data once it is loaded if JS just keeps on going?
    // We can add something to the promise to tell it what to do when the data comes back in!
    var dataset; // If you think you'll need the data much later on, you can define a var...
    d3.json('../datasets/titanic.json').then( (data) => {
      
    // EVERYTHING having to do with the data variable has to go within this function
    // Because it's asynchronous, JS is going to continue running stuff outside of the .then() while it waits
    // For that reason, outside of .then() the code isn't going to know about the data variable    
    
      console.log(data);
      dataset = data;  // ... and assign the data to it
      
    } );
    // console.log(data);
    console.log(dataset);   //  but... because it's an async call it's going to return undefined outside of .then()
                            //  (at least until .then() executes, then dataset has stuff in it)
                            
    
    // .then is triggered by the promise if it successfully calls back
    // otherwise an error may be recorded
    d3.json('../datasets/titanics.json')
      .then( (data) => { console.log('data', data); }, (error) => { console.log('error', error); } )
    
    // .then() is important because it allows us to work 'asynchronously' and not hold up the browser
    // We'll see another construction that's even more flexible later this term (async + await)
    
    
    // Let's make a plain old scatterplot

    // 0. Find our SVG and get that ready
    //     We're going to use a new way of padding that makes axes easier
    const svg = d3.select('svg#scatterplot');
    const width = svg.attr('width');
    const height = svg.attr('height');
    const margins = {top: 10, right: 10, bottom: 50, left: 50}; // You can also include quotes
    const chartWidth = width - margins.left - margins.right;
    const chartHeight = height - margins.top - margins.bottom;

    // The sneaky trick uses a transform to add in the margins so you can forget about them when making the vis
    // We just use positions between 0 and chartWidth or chartHeight and it 'magically' ends up at the right place
    //  thanks to our use of the translate()
    let chartArea = svg.append('g')
                       .attr('transform',`translate(${margins.left},${margins.top})`);
          // This is the first time we have seen *string templating*
          // It is useful when you want to include variables inside of a string, and is commonly
          //  seen for things like transform
          // To do it, you use a `` instead of normal quotes '' (press the tilde key next to 1 to get a backtick)
          // When you want to insert a variable, use ${variable} within the template
          // The old way to do this would be: 
          //  .attr('transform','translate('+margins.left+','+margins.top+')')


    // 1. Import some CSV data
    //        .then( function(successfulResult), function(errorMessage) )
    d3.csv('../datasets/gapminder.csv')   // We talked a bit about d3.autoType in the lecture, for now we'll skip it
      .then( (data) => {
        
    // Again, you have to put EVERYTHING having to do with data inside the .then( function )
        
    console.log(data)
            
    // 2. Check for data issues
    // Let's fix some things up
    data.forEach( (d, i) => {
      d['life'] = Number(d['Life Expectancy']);
      d['gdp'] = Number(d['GDP/Person (PPP$)']);
      // d['pop'] = Number(d['Total Population']); // This will pump out NaNs. Why?
      d['pop'] = Number(d['Total Population'].replace(/,/g,'')); // Fix with replace for commas
    });

    // 3. Let's build some scales
    const gdpExtent = d3.extent(data, d => d['gdp'] );
    const gdpScale = d3.scaleLinear().domain(gdpExtent)
                                     .range([0, chartWidth]);
    
    const lifeExtent = d3.extent(data, d => d['life'] );
    const lifeScale = d3.scaleLinear().domain(lifeExtent)
                        .range([chartHeight, 0]); // Using the trick of switching the y max & min to make y positions easy

    const popExtent = d3.extent(data, d => d['pop'] );
    const popScale = d3.scaleLinear().domain(popExtent)
                                     .range([5,10]); // circle size
    
    // Remember, the anonymous functions d => d['pop'] are just a shortcut for:
    //        (d) => { return d['pop']; }
    //    or  function(d) { return d['pop']; }
    // You can change (d) => to d =>  if there is only one parameter going in
    // and you can change => { return d['pop']; } to => d['pop'] if you're immediately returning a value from the function
    
    
    // 4. Start plotting circles and see what happens
    
    
    
    
    
    
    // ---- 3
    // 5. Let's add some axes
    // We're going to use D3's axis tools to do it
    
    
    
    
    // 5A. We can manually make some gridlines
    //  It would work fine for HW4, but I don't recommend it once you start using axis labels
    
    
    

    // 5B. Or we can use axes in a clever way
    
    
    
    
    
    // Next up: filtering, legends, and advanced formatting
    
    

  })


  </script>

  

  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  
  function sanitize(s) {
    return s.replace("<br>", "\\n")
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
          }
    document.getElementById("display").innerHTML = sanitize( document.getElementById("notes").innerText);
    hljs.highlightAll();
  </script>


  </div>
</body>
</html>
